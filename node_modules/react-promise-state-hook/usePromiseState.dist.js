var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
__export(exports, {
  PromiseStatus: () => PromiseStatus,
  createUsePromiseState: () => createUsePromiseState,
  usePromiseState: () => usePromiseState
});
var React = __toModule(require("react"));
var PromiseStatus;
(function(PromiseStatus2) {
  PromiseStatus2[PromiseStatus2["NOT_STARTED"] = 0] = "NOT_STARTED";
  PromiseStatus2[PromiseStatus2["PENDING"] = 1] = "PENDING";
  PromiseStatus2[PromiseStatus2["REJECTED"] = 2] = "REJECTED";
  PromiseStatus2[PromiseStatus2["FULFILLED"] = 3] = "FULFILLED";
})(PromiseStatus || (PromiseStatus = {}));
const promiseStateReducer = (prev, next) => {
  if (next.status === 1) {
    if (prev.status === 2) {
      return { status: next.status, value: null, err: prev.err };
    } else if (prev.status === 3) {
      return { status: next.status, value: prev.value, err: null };
    } else {
      return { status: next.status, value: null, err: null };
    }
  }
  if (next.status === 2) {
    return { status: next.status, value: null, err: next.err };
  }
  if (next.status === 3) {
    return { status: next.status, value: next.value, err: null };
  }
  return { status: 0, value: null, err: null };
};
const usePromiseState = (asyncFn, { onError = console.error } = {}) => {
  const isPending = React.useRef(false);
  const isMounted = React.useRef(true);
  React.useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);
  const [result, dispatch] = React.useReducer(promiseStateReducer, {
    status: 0,
    value: null,
    err: null
  });
  const call = React.useCallback((...params) => __async(void 0, null, function* () {
    if (isPending.current) {
      return;
    }
    isPending.current = true;
    if (isMounted.current) {
      dispatch({ status: 1, value: null, err: null });
    }
    try {
      const value = yield asyncFn(...params);
      if (isMounted.current) {
        dispatch({ status: 3, value, err: null });
      }
    } catch (err) {
      onError(err);
      if (isMounted.current) {
        dispatch({ status: 2, value: null, err });
      }
    }
    isPending.current = false;
  }), [asyncFn, onError]);
  return [call, result];
};
const createUsePromiseState = (predefinedOptions) => (asyncFn, options = predefinedOptions) => usePromiseState(asyncFn, options);
